@model IEnumerable<library.book>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section search {
    <div style="width: 500px;">
        @using (Html.BeginForm())
        {
            <div style="display: inline-flex; align-items: center;">
                @Html.TextBox("Search", "", new { @id = "Search", @style = "padding: 5px; width: 200px; border: 1px solid #ccc; border-radius: 4px 0 0 4px; border-right: none;" })
                <input type="submit" name="submit" value="Tìm" style="padding: 5px 10px; background-color: #007bff; color: white; border: 1px solid #007bff; border-radius: 0 4px 4px 0; cursor: pointer;" />
            </div>
        }
    </div>
}


<h2 class="mt-4 text-center">QUẢN LÝ SÁCH</h2>
<p>
    <a href="@Url.Action("Create", "Book")" class="btn btn-success">Create New</a>
    <a href="javascript:void(0);" class="btn btn-primary" onclick="showPreviewModal()">Export to Excel</a>
    <a href="@Url.Action("ExportOutdatedBooks", "Book")" class="btn btn-warning">Export Outdated Books</a>
</p>

<div class="table-responsive">
    <table class="table table-bordered table-striped table-hover">
        <thead class="thead-light">
            <tr>
                <th></th> <!-- Edit button column -->
                <th></th> <!-- Details button column -->
                <th></th> <!-- Delete button column -->
                <th>
                    @Html.DisplayNameFor(model => model.First().idBook)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().quantity)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().quantityTotal)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().category.nameCategory)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().bookshelf.nameBookshelfRow)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().titleBook)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().authorName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().publisher)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().pubDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().reprintDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().numberOfPages)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().bookLanguage)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().price)
                </th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.idBook }, new { @class = "btn btn-warning btn-sm" })
                    </td>
                    <td>
                        @Html.ActionLink("Details", "Details", new { id = item.idBook }, new { @class = "btn btn-info btn-sm" })
                    </td>
                    <td>
                        @using (Html.BeginForm("DeleteConfirmed", "Book", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@item.idBook" />
                            <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this item?');">Delete</button>
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.idBook)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.quantity)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.quantityTotal)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.category.nameCategory)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.bookshelf.nameBookshelfRow)
                        - @Html.DisplayFor(modelItem => item.bookshelf.shelfPosition)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.titleBook)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.authorName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.publisher)
                    </td>
                    <td>
                        @(item.pubDate.HasValue ? item.pubDate.Value.ToString("dd/MM/yyyy") : "N/A")
                    </td>
                    <td>
                        @(item.reprintDate.HasValue ? item.reprintDate.Value.ToString("dd/MM/yyyy") : "N/A")
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.numberOfPages)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.bookLanguage)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.price)
                    </td>

                </tr>
            }
        </tbody>
    </table>
</div>




<!-- Enhanced Preview Modal Structure -->
<div id="exportPreviewModal" class="modal" tabindex="-1" role="dialog" style="display:none;">
    <div class="modal-dialog modal-lg" role="document" style="max-width: 90%; border-radius: 10px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #007bff; color: white; border-top-left-radius: 10px; border-top-right-radius: 10px;">
                <h5 class="modal-title">Preview Export to Excel</h5>
                <button type="button" class="close" onclick="closePreviewModal()" style="color: white;">&times;</button>
            </div>
            <div class="modal-body" style="padding: 20px;">
                <!-- Table to display data preview -->
                <div class="table-responsive">
                    <table class="table table-bordered table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th>ID</th>
                                <th>Quantity</th>
                                <th>Quantity Total</th>
                                <th>Category</th>
                                <th>Bookshelf</th>
                                <th>Title</th>
                                <th>Author</th>
                                <th>Publisher</th>
                                <th>Publication Date</th>
                                <th>Reprint Date</th>
                                <th>Pages</th>
                                <th>Language</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody id="previewTableBody">
                            <!-- JavaScript will populate rows here -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer" style="justify-content: space-between; padding: 15px 20px;">
                <button type="button" class="btn btn-secondary" onclick="closePreviewModal()">Close</button>
                <a href="@Url.Action("ExportToExcel", "Book")" class="btn btn-primary">Export to Excel</a>
            </div>
        </div>
    </div>
</div>

<script>
    function showPreviewModal() {
        fetchPreviewData();
        document.getElementById('exportPreviewModal').style.display = 'block';
    }

    function closePreviewModal() {
        document.getElementById('exportPreviewModal').style.display = 'none';
    }

    function fetchPreviewData() {
    $.get('@Url.Action("GetPreviewData", "Book")', function (data) {
        var previewTableBody = $('#previewTableBody');
        previewTableBody.empty();

        data.forEach(function (book) {
            previewTableBody.append(
                `<tr>
                    <td>${book.idBook}</td>
                    <td>${book.quantity}</td>
                    <td>${book.quantityTotal}</td>
                    <td>${book.category.nameCategory}</td>
                    <td>${book.bookshelf.nameBookshelfRow} - ${book.bookshelf.shelfPosition}</td>
                    <td>${book.titleBook}</td>
                    <td>${book.authorName}</td>
                    <td>${book.publisher}</td>
                    <td>${formatDate(book.pubDate)}</td>
                    <td>${formatDate(book.reprintDate)}</td>
                    <td>${book.numberOfPages}</td>
                    <td>${book.bookLanguage}</td>
                    <td>${book.price}</td>
                </tr>`
            );
        });
    });
}

// Function to convert the /Date(1577811600000)/ format to a readable date
function formatDate(jsonDate) {
    if (!jsonDate) return 'N/A'; // Handle null or undefined dates

    // Extract the timestamp from the string
    var timestamp = jsonDate.match(/\/Date\((\d+)\)\//)[1];
    // Create a new Date object
    var date = new Date(parseInt(timestamp));

    // Return a formatted date string (you can customize this format)
    return date.toLocaleDateString(); // Example: "MM/DD/YYYY"
}

</script>
